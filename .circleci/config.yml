version: 2.1 
#orbs:
 # slack: circleci/slack@4.1
commands: 
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID
   
    
    steps:
        - run: 
            name: Destroy environments
            when: on_fail
            command: | 
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              exit 1
              

jobs:
  build-frontend:
    docker: 
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build] 
      - run: 
          name: build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      #- slack/notify:
           #channel: $SLACK_DEFAULT_CHANNEL
          # event: fail
         #  template: basic_fail_1
      #- slack/notify:
       #   event: pass
        #  template: success_tagged_deploy_1

  
  build-backend:
    docker: 
    - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: build backend
          command: | 
            cd backend
            npm install
            npm run build
      - save_cache:
         paths: [frontend/node_modules]
         key: backend-build
     # - slack/notify:
           #channel: $SLACK_DEFAULT_CHANNEL
           #event: fail
           #template: basic_fail_1
     # - slack/notify:
            #event: pass
            #template: success_tagged_deploy_1
  
  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: test frontend
          command: | 
            cd frontend
            npm install
            npm run test
  
  test-backend: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [backend-build] 
      - run: 
          name: test backend
          command: | 
            cd backend
            npm install
            npm run test 
  
  scan-frontend: 
    docker: 
      - image: circleci/node:13.8.0
    
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: scan frontend for security vulnarabilities
          command: | 
              cd frontend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    
    steps: 
      - checkout
      - run: 
          name: scan backend for security vulnarabilities
          command: | 
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - restore_cache: 
          keys: [backend-build]
  
  deploy-infrastructure:
    docker: 
     - image: amazon/aws-cli
    
    steps:
        - checkout 
        - run: 
            name: ensure backend infrastructure exits 
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople

        - run: 
            name: Ensure frontend infrastructure is Up 
            command: | 
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople-frontend
        - run:
            name: add backend public ip to ansible inventory
            command: | 
              echo "[all]" > project/.circleci/ansible/inventory.txt \
              aws ec2 descibe-instances --instance-ids $instance_id --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> project/.circleci/ansible/inventory.txt \
              exit 1
        - destroy-environment

  
workflows: 
  defaults: 
    jobs: 
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
